//! From https://github.com/alloy-rs/examples/blob/main/examples/contracts/examples/deploy_from_artifact.rs
//! Example of deploying a contract from an artifact using the `sol!` macro to Anvil and interacting
//! with it.

//TODO
// use alloy::{
//     network::EthereumWallet, primitives::U256, providers::ProviderBuilder,
//     signers::local::LocalSigner, sol, transports::http::reqwest::Url,
// };
// use eyre::Result;
// use serde::Deserialize;

// use alloy::{
//     primitives::{Address, U256},
//     sol,
// };

// use eyre::Result;

use alloy_provider::ReqwestProvider;
use alloy_transport::{BoxTransport, Transport};
use eyre::Result;
//use serde::Deserialize;
use alloy::{
    primitives::{Address, FixedBytes, U256},
    sol,
    transports::http::ReqwestTransport,
};

use crate::counter_deploy::Counter::CounterInstance;

// Codegen from artifact.
sol!(
    #[allow(missing_docs)]
    #[sol(rpc)]
    Counter,
    "contracts/Counter.json"
);

pub struct CounterDeploy<T, P> {
    pub token_contract: CounterInstance<T, P>,
}

//        <T as Table>::Value: Default,
impl<T, P> CounterDeploy<T, P>
where
    T: Transport + Clone,
    P: alloy_provider::Provider<T>,
{
    pub async fn new(provider: P, _initial_value: U256) -> Result<Self> {
        //        let token_contract = Counter::deploy(&provider, initial_value).await?;
        let token_contract = Counter::deploy(provider).await?;
        Ok(Self { token_contract })
    }

    pub async fn address(&self) -> Result<&Address> {
        let addr = self.token_contract.address();
        Ok(addr)
    }

    pub async fn set_number(&self, value: U256) -> Result<FixedBytes<32>> {
        let builder = self.token_contract.setNumber(U256::from(value));
        let tx_hash = builder.send().await?.watch().await?;
        Ok(tx_hash)
    }

    pub async fn increment(&self) -> Result<FixedBytes<32>> {
        let builder = self.token_contract.increment();
        let tx_hash = builder.send().await?.watch().await?;
        Ok(tx_hash)
    }

    pub async fn number(&self) -> Result<U256> {
        let builder = self.token_contract.number();
        // Note: because the artifact generated by `solc` does not include named return values it is
        // not possible to derive the return value name `number` from the artifact. This means that the
        // return value must be accessed by index - as if it is an unnamed value.
        // If you prefer to use named return values, it is recommended to embed the Solidity code
        // directly in the `sol!` macro as shown in `deploy_from_contract.rs`.
        let value = builder.call().await?._0;
        Ok(value)
    }

    pub async fn get_number_plus17(&self) -> Result<U256> {
        let res = self.token_contract.getNumberPlus17().call().await?._0;
        Ok(res)
    }
}
